# -*- coding: utf-8 -*-
"""UCS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NPPE6EzYE9u5VmV_GjsU9XEG9MjbSDbK
"""

def uniform_cost_search(goal, start):
    global graf, cost
    answer = []

    queue = []

    for i in range(len(goal)):
        answer.append(10**8)

    queue.append([0, start])

    visited = {}

    count = 0

    while len(queue) > 0:
        queue = sorted(queue)
        p = queue[-1]
        del queue[-1]
        p[0] *= -1

        if p[1] in goal:
            index = goal.index(p[1])

            if answer[index] == 10**8:
                count += 1

            if answer[index] > p[0]:
                answer[index] = p[0]

            if count == len(goal):
                return answer

        if p[1] not in visited:
            for i in range(len(graf[p[1]])):
                queue.append([(p[0] + cost[(p[1], graf[p[1]][i])]) * -1, graf[p[1]][i]])

            visited[p[1]] = 1  # Ini harus tetap dalam blok if, tetapi return dihapus di sini

    return answer  # Return answer dipindah keluar loop while

if __name__ == '__main__':
    graf, cost = [[] for _ in range(8)], {}

    graf[0].append(1)
    graf[0].append(3)
    graf[3].append(1)
    graf[3].append(6)
    graf[3].append(4)
    graf[1].append(6)
    graf[4].append(2)
    graf[4].append(5)
    graf[2].append(1)
    graf[5].append(2)
    graf[5].append(6)
    graf[6].append(4)

    cost[(0, 1)] = 2
    cost[(0, 3)] = 5
    cost[(1, 6)] = 1
    cost[(3, 1)] = 5
    cost[(3, 4)] = 2
    cost[(2, 1)] = 4
    cost[(4, 2)] = 4
    cost[(4, 5)] = 3
    cost[(5, 2)] = 6
    cost[(5, 6)] = 3
    cost[(6, 4)] = 7

    goal = [6]  # Deklarasi goal sebagai list yang benar

    answer = uniform_cost_search(goal, 0)

    print("Minimum cost from 0 to 6 is =", answer[0])