# -*- coding: utf-8 -*-
"""a_star_tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hRqfuTgjtGU9VpUdBejoC_vCGAhfSq_a
"""

from queue import PriorityQueue

def a_star_search(graf, start, goal, heuristic):
    frontier = PriorityQueue()
    frontier.put((0, start))  # Memasukkan tuple (prioritas, simpul)
    explored = set()

    while not frontier.empty():
        cost, current_node = frontier.get()  # Mengambil tuple (prioritas, simpul)

        if current_node == goal:
            print("Simpul tujuan sudah ditemukan!")
            return True

        explored.add(current_node)

        for neighbour, weight in graf[current_node].items():  # Perbaikan akses graf
            if neighbour not in explored:
                priority = heuristic[neighbour] + graf [current_node][neighbour]
                frontier.put((priority, neighbour))

    print("Simpul tujuan tidak ditemukan!")
    return False

heuristic = {
    'A' : 9,
    'B' : 4,
    'C' : 2,
    'D' : 5,
    'E' : 3,
    'S' : 7,
    'G' : 0
}

graf = {
    'S' : {'A':3, 'E':2},
    'A' : {'B':3, 'C':4},
    'B' : {'D':5},
    'C' : {'G':7},
    'D' : {'G':3},
    'E' : {'D':6}
}

start_node = 'S'
goal_node = 'G'

a_star_search(graf, start_node, goal_node, heuristic)